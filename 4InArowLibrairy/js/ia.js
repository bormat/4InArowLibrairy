// Generated by LiveScript 1.4.0
(function(){
  "use strict";
  var forOf, forOfSome, IA;
  forOf = function(obj, func){
    var keys, i$, to$, i, o, results$ = [];
    keys = Object.keys(obj);
    for (i$ = 0, to$ = keys.length; i$ < to$; ++i$) {
      i = i$;
      o = keys[i];
      results$.push(func(obj[o], o, obj));
    }
    return results$;
  };
  forOfSome = function(obj, func){
    var keys, lg, i, o;
    keys = Object.keys(obj);
    lg = keys.length;
    i = 0;
    while (i < lg) {
      o = keys[i];
      if (func(obj[o], o, obj)) {
        return;
      }
      i++;
    }
    return true;
  };
  IA = window.IA = {
    dif: 100,
    winningRedPairs: [],
    winningYellowOdds: [],
    winningRedOdds: [],
    winningYellowPairs: [],
    forbids: [],
    inadvisables: [],
    pos: -1,
    modelId: 0,
    boolSmart: [],
    isModelfound: false,
    notUnderMe: function(inadvisables){
      var i, position, results$ = [];
      i = 0;
      while (i < 7) {
        Modele.nextPlayer();
        position = Modele.play(i, true);
        Modele.grille[position] = "2";
        Modele.nextPlayer();
        Modele.play(i, true);
        Modele.grille[position] = "0";
        if (Modele.isGameFinish()) {
          if (position !== inadvisables.at(-1) && position >= 0) {
            if (position >= 0) {
              inadvisables.push(position);
            }
          }
        }
        results$.push(i++);
      }
      return results$;
    },
    ifPlayHereGiveMeExactPos: function(posJoueur){
      var cond1, cond2;
      posJoueur = parseInt(posJoueur);
      posJoueur = Modele.play(posJoueur, true);
      if (~posJoueur) {
        cond1 = ~this.forbids.indexOf(posJoueur);
        cond2 = ~this.inadvisables.indexOf(posJoueur);
        if (!(cond1 || cond2)) {
          this.isModelfound = true;
          posJoueur = Modele.play(posJoueur, true);
          this.pos = posJoueur;
          return posJoueur;
        }
      }
      return this.pos = -1;
    },
    positionOfSym: function(pos, length, sym){
      var ref$;
      return pos += sym && ((((length + ~pos)) % (ref$ = 7) + ref$) % ref$) - pos % 7;
    },
    fillsWinningPos: function(){
      var i$, o, trouvePlayerImpaire, trouveBotPaire, trouvePlayerPaire, trouveBotImpaire;
      for (i$ = 0; i$ <= 6; ++i$) {
        o = i$;
        this.winningYellowPairs[o] = -1;
        this.winningRedPairs[o] = -1;
        this.winningYellowOdds[o] = -1;
        this.winningRedOdds[o] = -1;
      }
      o = 42;
      while (o > 0) {
        if (+Modele.grille[o] === 0) {
          Modele.grille[o] = 1;
          trouvePlayerImpaire = this.winningYellowOdds[o % 7];
          trouveBotPaire = this.winningRedPairs[o % 7];
          trouvePlayerPaire = this.winningYellowPairs[o % 7];
          trouveBotImpaire = this.winningRedOdds[o % 7];
          if (~~(o / 7) % 2 === 1 && +trouvePlayerImpaire === -1 && Modele.isGameFinish(o)) {
            this.winningYellowOdds[o % 7] = o;
          } else if (~~(o / 7) % 2 === 0 && trouvePlayerPaire === -1 && Modele.isGameFinish(o)) {
            this.winningYellowPairs[o % 7] = o;
          }
          Modele.grille[o] = 2;
          if (~~(o / 7) % 2 === 0 && trouveBotPaire === -1 && Modele.isGameFinish(o)) {
            this.winningRedPairs[o % 7] = o;
          } else if (~~(o / 7) % 2 === 1 && trouveBotImpaire === -1 && Modele.isGameFinish(o)) {
            this.winningRedOdds[o % 7] = o;
          }
          Modele.grille[o] = 0;
        }
        o--;
      }
    },
    playAllPos: function(u){
      var i, results$ = [];
      this.pos = -1;
      i = u - 7;
      while (i < u && this.pos < 0) {
        this.ifPlayHereGiveMeExactPos(i);
        results$.push(i++);
      }
      return results$;
    },
    playWithoutModel: function(){
      var firstTurn, stopLoop1, results$ = [];
      firstTurn = true;
      alert;
      for (;;) {
        this.playAllPos(this.posJoueur);
        if (~this.pos && firstTurn) {
          for (;;) {
            if (!this.wontBecomeLikeThisModel(TabWontBecomeLikeThisModelPlayerTurn, 1, this.pos)) {
              if (stopLoop1 = true) {
                break;
              }
            }
            this.playAllPos(this.posJoueur);
            if (!~this.pos) {
              break;
            }
          }
          if (stopLoop1) {
            break;
          }
          firstTurn = false;
        }
        if (!((this.inadvisables.pop() != null || this.forbids.pop() != null) && this.pos < 0)) {
          break;
        }
      }
      return results$;
    },
    winInTwoTurn: function(playerTurn){
      var i$, i, position2, cptGagnerDirect, o, WinnerPos, otherPlayerWinOnMe;
      for (i$ = 0; i$ <= 6; ++i$) {
        i = i$;
        Modele.setPlayer(playerTurn);
        this.pos = Modele.play(i, true);
        if (playerTurn === 1
          ? this.forbids.indexOf(this.pos) < 0
          : !this.comparerLigne("g", this.pos - 7)) {
          position2 = this.pos;
          Modele.grille[this.pos] = playerTurn;
          cptGagnerDirect = 0;
          o = 0;
          while (o < 7) {
            this.pos = Modele.play(o, true);
            if (Modele.isGameFinish() && ~this.pos) {
              cptGagnerDirect++;
              WinnerPos = Modele.getPlayer() === 1 ? "g" : "i";
              otherPlayerWinOnMe = Modele.getPlayer() === 1
                ? false
                : this.comparerLigne("g", this.pos);
              if ((cptGagnerDirect === 1 && IA.comparerLigne(WinnerPos, IA.pos - 7)) || (cptGagnerDirect > 1 && !otherPlayerWinOnMe)) {
                Modele.grille[position2] = 0;
                IA.pos = i;
                IA.isModelfound = true;
                return i;
              }
            }
            o++;
          }
          Modele.grille[position2] = 0;
        }
      }
      return IA.pos = -1;
    },
    gagnerDirect: function(){
      var i$, i;
      for (i$ = 0; i$ <= 7; ++i$) {
        i = i$;
        IA.pos = Modele.play(i, true);
        if (Modele.isGameFinish()) {
          Modele.isGameFinish(false);
          return IA.isModelfound = true;
        }
      }
      return IA.pos = -1;
    },
    playAvecModele: function(){
      var param, j, rec;
      param = {
        modelID: 0
      };
      j = 0;
      IA.pos5 = 48;
      IA.modelId = 0;
      return (rec = function(){
        var TabOfTab, position3, isPosBad;
        TabOfTab = [attaque, defense, miniDef, mesModele];
        while (j < TabOfTab.length) {
          for (;;) {
            if (IA.modelId >= TabOfTab[j].length) {
              break;
            }
            position3 = IA.modeledetectorAndAnswer(TabOfTab[j]);
            IA.modelId;
            if (~position3) {
              IA.ifPlayHereGiveMeExactPos(position3);
              if (~IA.pos) {
                isPosBad = IA.wontBecomeLikeThisModel(TabWontBecomeLikeThisModelPlayerTurn, 1, IA.pos);
                if (isPosBad) {
                  rec();
                }
                return IA.pos;
              }
              IA.pos5--;
            }
            IA.modelId = param.modelID = ++IA.modelId;
          }
          IA.modelId = param.modelID = 0;
          IA.pos5 = 48;
          j++;
        }
        IA.pos5 = "notFound";
        return -1;
      })();
    },
    falseOrModelIfFound: function(param){
      if (param.isModelfound) {
        return param;
      } else {
        return false;
      }
    },
    giveMeACheckedPosition: function(functionWhoReturnFalseOrPosToCheck){
      var i, param, results$ = [];
      i = 0;
      param = {
        isModelfound: false
      };
      for (;;) {
        IA.pos = functionWhoReturnFalseOrPosToCheck();
        if (IA.pos < 0) {
          IA.isModelfound = false;
          break;
        }
        param = IA.wontBecomeLikeThisModel(TabWontBecomeLikeThisModelPlayerTurn, 1, this.pos);
        this.isModelfound = !param.isModelfound;
        if (!i++) {
          break;
        }
        results$.push(param.isModelfound && i < 7);
      }
      return results$;
    },
    wontBecomeLikeThisModel: function(TabWontBecomeLikeThisModel, player, posBot){
      var param, i$, i, pos, j$, len$, mod;
      if (posBot < 0) {
        return {};
      }
      param = undefined;
      posBot = Modele.play(posBot, true);
      Modele.grille[posBot] = player;
      for (i$ = 0; i$ <= 6; ++i$) {
        i = i$;
        pos = Modele.play(i, true);
        Modele.grille[pos] = 2;
        if (~pos) {
          for (j$ = 0, len$ = TabWontBecomeLikeThisModel.length; j$ < len$; ++j$) {
            mod = TabWontBecomeLikeThisModel[j$];
            param = this.structModelDetector(mod, 48);
            if (param.isModelfound) {
              break;
            }
          }
          Modele.grille[pos] = 0;
          if (IA.isModelfound) {
            IA.inadvisables.push(parseInt(posBot));
            break;
          }
        }
      }
      Modele.grille[posBot] = 0;
      pos = param.isModelfound ? -1 : pos;
      return param;
    },
    futureIWant: function(param, ModelInStruct, pos){
      var i$, j, pos3;
      for (i$ = 0; i$ <= 6; ++i$) {
        j = i$;
        if (param.isModelfound) {
          break;
        }
        pos3 = Modele.play(j, true);
        if (~pos3) {
          Modele.grille[pos3] = 1;
          param = IA.findModel(ModelInStruct, pos);
          Modele.grille[pos3] = 0;
        }
      }
      if (param.isModelfound) {
        IA.currMod = ModelInStruct.tab;
        IA.playAt = pos3;
      }
      IA.isModelfound = param.isModelfound;
      return param;
    },
    modeledetectorAndAnswer: function(modele, findAt){
      var tab;
      if (findAt) {
        IA.modelId = 0;
      } else {
        findAt = {};
      }
      IA.modele = modele;
      this.param = {
        isModelfound: false
      };
      tab = [];
      while (this.modelId < modele.length && this.param.isModelfound === false) {
        tab = this.getListOfMatchingPos(findAt);
        findAt.modelID++;
        this.modelId = findAt.modelID;
      }
      this.pos = tab[0];
      findAt.modelID--;
      this.modelId--;
      this.isModelfound = this.param.isModelfound;
      return this.pos = this.isModelfound
        ? this.pos
        : -1;
    },
    findModel: function(ModelInStruct, pos){
      var param, i$, ref$, len$, mod, otherOption, length, j, x$, stringToEVal, logicalOperator, i;
      IA.currMod = ModelInStruct.tab;
      IA.isModelfound = false;
      if (!ModelInStruct.logicalOperator) {
        for (i$ = 0, len$ = (ref$ = this.currMod).length; i$ < len$; ++i$) {
          mod = ref$[i$];
          param = this.modeleDetector3(mod, pos);
          if (param.isModelfound) {
            break;
          }
        }
      } else {
        otherOption = {};
        length = ModelInStruct.sym ? 1 : 2;
        j = 0;
        for (i$ = 0; i$ < length; ++i$) {
          j = i$;
          if (IA.isModelfound) {
            break;
          }
          x$ = ModelInStruct;
          if (x$.sameSym && !x$.sameSym || !x$.sym) {
            otherOption.sym = !!j;
          }
          stringToEVal = 'param=';
          logicalOperator = ModelInStruct.logicalOperator;
          i = 0;
          while (i < logicalOperator.length - 1) {
            stringToEVal += logicalOperator[i] + (" IA.falseOrModelIfFound(IA.modeleDetector3(ModelInStruct.tab[" + i + "],pos,otherOption)) ");
            i++;
          }
          stringToEVal += logicalOperator[i];
          eval(stringToEVal);
          IA.isModelfound = param.isModelfound;
        }
      }
      IA.currMod = ModelInStruct.tab;
      return param;
    },
    structModelDetector: function(ModelInStruct, pos){
      var param, exept;
      param = {};
      IA.currMod = ModelInStruct.theTab;
      param = IA.findModel(ModelInStruct, pos);
      if (ModelInStruct.mode === "futur") {
        param = param.isModelfound
          ? {
            isModelfound: false
          }
          : IA.futureIWant(param, ModelInStruct, pos);
      }
      if (param.isModelfound) {
        exept = ModelInStruct.exept;
        param.theModelISelf = ModelInStruct;
        if (exept) {
          exept.sym = param.sym;
          if (IA.structModelDetector(exept, 48).isModelfound) {
            param.isModelfound = false;
          }
        }
        if (ModelInStruct.hasOwnProperty("playAt")) {
          IA.playAt = ModelInStruct.playAt;
        }
      }
      IA.isModelfound = param.isModelfound;
      return param;
    },
    bloquerDirect: function(){
      var i;
      Modele.nextPlayer();
      i = 0;
      while (i < 7) {
        IA.pos = Modele.play(i, true);
        if (Modele.isGameFinish()) {
          Modele.nextPlayer();
          return IA.pos = Modele.play(IA.pos, true);
        }
        i++;
      }
      Modele.nextPlayer();
      return IA.pos = -1;
    },
    dontHelpJ2: function($forbids){
      var i, position, results$ = [];
      i = 0;
      while (i < 7) {
        position = Modele.play(i, true);
        Modele.grille[position] = "1";
        Modele.nextPlayer();
        Modele.play(i, true);
        Modele.nextPlayer();
        Modele.grille[position] = "0";
        if (Modele.isGameFinish() && position !== $forbids[$forbids.length - 1] && position >= 0) {
          $forbids.push(position);
        }
        results$.push(i++);
      }
      return results$;
    },
    detectBadPositionAlgorythme: function(){
      var i, pos;
      i = 0;
      while (i < 7) {
        Modele.setPlayer(1);
        pos = Modele.play(i, true);
        Modele.grille[pos] = "1";
        if (~IA.winInTwoTurn(2)) {
          IA.inadvisables.push(pos);
        }
        IA.isModelfound = false;
        Modele.grille[pos] = 0;
        i++;
      }
      return Modele.setPlayer(1);
    },
    getListOfMatchingPos: function(findAt){
      var tabPosInBigGrille, model, u;
      tabPosInBigGrille = [];
      model = IA.modele[findAt.modelID = IA.modelId];
      IA.param = IA.structModelDetector(model, IA.pos5);
      IA.currMod = IA.param.theTab;
      IA.pos = IA.param.pos;
      if (IA.currMod) {
        IA.currMod = Array.isArray(IA.currMod[0])
          ? IA.currMod[0]
          : IA.currMod;
      }
      if (IA.isModelfound === true) {
        if (Array.isArray(IA.playAt)) {
          u = 0;
          while (u < IA.playAt.length) {
            tabPosInBigGrille.push(IA.addPosOkToGroup(IA.playAt[u]));
            u++;
          }
        } else {
          tabPosInBigGrille.push(IA.addPosOkToGroup(IA.playAt));
        }
        IA.pos5 = IA.beginToEnd(IA.pos);
      } else {
        IA.pos5 = 48;
      }
      return tabPosInBigGrille;
    },
    addPosOkToGroup: function(posRelativeToModele){
      if (IA.param.theModelISelf && IA.param.theModelISelf.mode === "futur") {
        return IA.playAt;
      } else {
        return IA.pos + IA.positionOfSym(posRelativeToModele, IA.currMod[0].length, IA.param.sym);
      }
    },
    beginToEnd: function(begin){
      return begin + IA.currMod.length * 7 - 7;
    },
    findForbiddenAndNotRecommandedPosition: function(){
      var findAt, tabForbids, o, tab;
      IA.forbids.length = IA.inadvisables.length = 0;
      IA.dontHelpJ2(IA.forbids);
      IA.detectBadPositionAlgorythme();
      findAt = {};
      IA.pos5 = 48;
      IA.param = {
        isModelfound: false
      };
      tabForbids = [modPosDeconseille, interditUnPeu];
      o = 0;
      while (o < tabForbids.length) {
        IA.modele = tabForbids[o];
        IA.modelId = 0;
        while (IA.modelId < IA.modele.length) {
          tab = IA.getListOfMatchingPos(findAt);
          if (IA.param.isModelfound === false) {
            IA.pos5 = 48;
            IA.modelId++;
          } else {
            Array.prototype.push.apply(IA.inadvisables, tab);
            IA.pos5--;
          }
        }
        o++;
      }
      IA.notUnderMe(IA.inadvisables);
      return IA.DeleteException();
    },
    DeleteException: function(){
      var findAt, position, pos, results$ = [];
      findAt = {};
      IA.modelId = 0;
      IA.pos5 = 48;
      while (IA.modelId < mesModele.length) {
        IA.modeledetectorAndAnswer(tabException);
        if (~IA.pos) {
          position = IA.pos;
          pos = IA.inadvisables.indexOf(position);
          while (~pos) {
            IA.inadvisables.splice(pos, 1);
            pos = IA.inadvisables.indexOf(position);
          }
          results$.push(IA.pos5--);
        } else {
          break;
        }
      }
      return results$;
    },
    isModeleBottomFlat: function(oneModele){
      var tab, res$, i$, ref$, len$, pos;
      res$ = [];
      for (i$ = 0, len$ = (ref$ = oneModele[oneModele.length - 1]).length; i$ < len$; ++i$) {
        pos = ref$[i$];
        if (pos !== "a" && pos !== "9") {
          break;
        }
      }
      tab = res$;
      return tab.length - 1 === oneModele[oneModele.length - 1];
    },
    modeleDetector4: function(oneModeleAndTheAnswer, position){
      var r;
      r = IA.modeleDetector3(oneModeleAndTheAnswer[0], position);
      this.pos = r.pos;
      this.playAt = oneModeleAndTheAnswer[1];
      this.currMod = oneModeleAndTheAnswer[0];
      if (!r.isModelfound) {
        this.pos = -1;
      }
      return r;
    },
    modeleDetector3: function(oneModele, position, otherOption){
      var sym, dontChangeSym, posOneModeleSym2, stopLoopCond, poses;
      sym = true;
      dontChangeSym = false;
      otherOption = otherOption || {};
      if (otherOption.hasOwnProperty("sym")) {
        sym = otherOption.sym;
        dontChangeSym = true;
      }
      posOneModeleSym2 = {
        'true': {
          pos: position
        },
        'false': {
          pos: position
        }
      };
      stopLoopCond = function(){
        var posSym, pos;
        posSym = posOneModeleSym2[sym].pos;
        pos = posOneModeleSym2[!sym].pos;
        return posOneModeleSym2[sym].isModelfound || otherOption.hasOwnProperty("samepos") || posSym < 0 && pos < 0 || dontChangeSym && posSym < 0;
      };
      for (;;) {
        poses = posOneModeleSym2[sym] = this.modeleDectector1(oneModele, posOneModeleSym2[sym].pos, sym);
        if (!poses.isModelfound) {
          poses.pos = Math.min(Math.ceil(poses.pos / 7) * 7 - oneModele[0].length, poses.pos - 1);
          sym = !dontChangeSym && !sym;
        }
        if (!!stopLoopCond()) {
          break;
        }
      }
      this.isModelfound = posOneModeleSym2[sym].isModelfound;
      return {
        pos: posOneModeleSym2[sym].pos - 7 * (oneModele.length - 1),
        sym: sym,
        isModelfound: this.isModelfound,
        theTab: oneModele
      };
    },
    modeleDectector1: function(oneModele, posOneModele, sym){
      var i, line;
      if (posOneModele !== false) {
        i = 0;
        while (i++ < oneModele.length) {
          line = oneModele.at(-i);
          if (sym) {
            line = line.reverse();
          }
          if (!IA.comparerLigne(line, posOneModele - 7 * (i - 1))) {
            break;
          }
        }
        if (i > oneModele.length) {
          return {
            pos: posOneModele,
            isModelfound: true
          };
        }
      }
      return {
        pos: posOneModele,
        isModelfound: false
      };
    },
    topToBottom: function(pos, length){
      return pos + length * 7 - 7;
    },
    bottomToTop: function(pos, length){
      return pos + ~length * 7;
    },
    comparerCaractere: function(a, car, impaire){
      car = +car;
      return a === 'a' || a === 'y' && car !== 2 || a === 'z' && car !== 1 || car == a || a == 9 && car !== 0 || a == 6 && (car === 1 || car === 2) || a == 5 && (car === 0 || car === 1 || car === 2) || (impaire
        ? a == 8 && car == 2 || a == 4 && car == 1
        : car == 1 && a == 3 || a == 7 && car == 2);
    },
    p4BlockEasy: function(posJoueur, retournerPosition){
      var x$, ref$, findAt, y$, i$, len$, func, z$;
      if (Modele.isGameFinish()) {
        return false;
      }
      if (parseInt(this.dif) / 100 + Math.random() > 1) {
        x$ = IA;
        (ref$ = x$.boolSmart)[ref$.length] = "true";
        x$.fillsWinningPos();
        IA.posJoueur = posJoueur;
        IA.isModelfound = false;
        IA.pos = -1;
        IA.modelId = 0;
        IA.pos5 = 48;
        Modele.setPlayer(1);
        findAt = {
          modelID: 0
        };
        y$ = IA;
        for (i$ = 0, len$ = (ref$ = [fn$, fn1$, fn2$, fn3$, fn4$, fn5$, fn6$]).length; i$ < len$; ++i$) {
          func = ref$[i$];
          func();
          if (~this.pos) {
            break;
          }
        }
      } else {
        z$ = IA;
        (ref$ = z$.boolSmart)[ref$.length] = "false";
        z$.pos = ~~(Math.random() * 7);
      }
      return Modele.play(IA.pos, retournerPosition);
      function fn$(){
        return y$.gagnerDirect();
      }
      function fn1$(){
        return y$.bloquerDirect();
      }
      function fn2$(){
        return y$.findForbiddenAndNotRecommandedPosition();
      }
      function fn3$(){
        return y$.winInTwoTurn(1);
      }
      function fn4$(){
        return y$.modeledetectorAndAnswer(perfectModele, {
          modelID: 0
        });
      }
      function fn5$(){
        y$.modelId = 0;
        y$.pos5 = 48;
        return y$.playAvecModele();
      }
      function fn6$(){
        return y$.playWithoutModel(posJoueur);
      }
    },
    comparerLigne: function(modligne, o){
      var cont, i, a, b, impaire, gotonextif;
      if (o < 0) {
        return false;
      }
      cont = true;
      i = o;
      while (i < modligne.length + o && cont) {
        a = modligne.charAt(i - o);
        a = '' + a;
        b = Modele.grille[i];
        if (o < 0) {
          return false;
        }
        impaire = ~~(i / 7) % 2;
        if (Modele.grille[i] === 0) {
          gotonextif = false;
          if (a === 'q' || a === 'p') {
            cont = this.winningRedPairs[i % 7] < this.winningYellowOdds[i % 7];
          } else if ('t' === a) {
            cont = this.inadvisables.indexOf(i) + 1;
          } else if (a === 'r') {
            cont = this.winningRedPairs[i % 7] < this.winningYellowOdds[i % 7] || this.winningYellowOdds[i % 7] === -1;
            cont = cont && this.winningRedPairs[i % 7] <= i;
            Modele.grille[i] = 1;
            cont = cont && Modele.isGameFinish(i);
          } else if (a === '.' || a === 'f') {
            Modele.grille[i] = 1;
            cont = cont && Modele.isGameFinish(i);
            if (a === '.') {
              cont = !cont;
            }
            if (cont) {
              Modele.grille[i] = 2;
              cont = Modele.isGameFinish(i);
              if (a === 'f') {
                cont = !cont;
              }
            }
          } else if (a === 'e' || a === 'r' || a === 'w') {
            cont = this.winningRedPairs[i % 7] < this.winningYellowOdds[i % 7] || this.winningYellowOdds[i % 7] === -1;
            if (cont) {
              cont = this.winningRedPairs[i % 7] <= i;
            }
          } else if (a === 'g' || a === 'j' || a === '.' || a === 'f') {
            Modele.grille[i] = 1;
            cont = cont && Modele.isGameFinish(i);
          } else if (a === 'h' || a === 'i') {
            Modele.grille[i] = 2;
            cont = Modele.isGameFinish(i);
          } else {
            gotonextif = true;
          }
          if (a === 'p' || a === 'h' || a === 'w' || a === 'j') {
            cont = !cont;
          }
          Modele.grille[i] = 0;
        } else {
          gotonextif = true;
        }
        if (gotonextif) {
          cont = this.comparerCaractere(a, b, impaire);
        }
        if (cont && i > modligne.length - 2 + o) {
          return cont;
        }
        i++;
      }
    }
  };
}).call(this);
