// Generated by CoffeeScript 1.9.0
(function() {
  "use strict";
  var IA, forOf, forOfSome;

  forOf = function(obj, func) {
    var i, keys, o, _i, _ref, _results;
    keys = Object.keys(obj);
    _results = [];
    for (i = _i = 0, _ref = keys.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      o = keys[i];
      _results.push(func(obj[o], o, obj));
    }
    return _results;
  };

  forOfSome = function(obj, func) {
    var i, keys, lg, o;
    keys = Object.keys(obj);
    lg = keys.length;
    i = 0;
    while (i < lg) {
      o = keys[i];
      if (func(obj[o], o, obj)) {
        return;
      }
      i++;
    }
    return true;
  };

  IA = window.IA = {
    dif: 100,
    setDif: function(dif) {
      return IA.dif = dif;
    },
    notUnderMe: function(inadvisables) {
      var i, position, _results;
      i = 0;
      _results = [];
      while (i < 7) {
        Modele.nextPlayer();
        position = Modele.play(i, true);
        Modele.grille[position] = "2";
        Modele.nextPlayer();
        Modele.play(i, true);
        Modele.grille[position] = "0";
        if (Modele.isGameFinish()) {
          if (position !== inadvisables.at(-1) && position >= 0) {
            if (position >= 0) {
              inadvisables.push(position);
            }
          }
        }
        _results.push(i++);
      }
      return _results;
    },
    ifPlayHereGiveMeExactPos: function(posJoueur) {
      var cond1, cond2;
      posJoueur = parseInt(posJoueur);
      posJoueur = Modele.play(posJoueur, true);
      if (~posJoueur) {
        cond1 = ~IA.forbids.indexOf(posJoueur);
        cond2 = ~IA.inadvisables.indexOf(posJoueur);
        if (!(cond1 || cond2)) {
          IA.isModelfound = true;
          posJoueur = Modele.play(posJoueur, true);
          IA.pos = posJoueur;
          return posJoueur;
        }
      }
      return IA.pos = -1;
    },
    positionOfSym: function(pos, length, sym) {
      return pos += sym && mod(length + ~pos, 7) - pos % 7;
    },
    fillsWinningPos: function() {
      var o, trouveBotImpaire, trouveBotPaire, trouvePlayerImpaire, trouvePlayerPaire, _i, _j;
      for (o = _i = 0; _i <= 6; o = ++_i) {
        IA.winningYellowPairs[o] = -1;
        IA.winningRedPairs[o] = -1;
        IA.winningYellowOdds[o] = -1;
        IA.winningRedOdds[o] = -1;
      }
      for (o = _j = 0; _j <= 41; o = ++_j) {
        if (Modele.grille[o] === 0) {
          Modele.grille[o] = 1;
          trouvePlayerImpaire = IA.winningYellowOdds[o % 7];
          trouveBotPaire = IA.winningRedPairs[o % 7];
          trouvePlayerPaire = IA.winningYellowPairs[o % 7];
          trouveBotImpaire = IA.winningRedOdds[o % 7];
          if (Math.floor(o / 7) % 2 === 1 && trouvePlayerImpaire === -1 && Modele.isGameFinish(o)) {
            IA.winningYellowOdds[o % 7] = o;
          } else if (Math.floor(o / 7) % 2 === 0 && trouvePlayerPaire === -1 && Modele.isGameFinish(o)) {
            IA.winningYellowPairs[o % 7] = o;
          }
          Modele.grille[o] = 2;
          if ((Math.floor(o / 7) % 2) === 0 && trouveBotPaire === -1 && Modele.isGameFinish(o)) {
            IA.winningRedPairs[o % 7] = o;
          } else if ((Math.floor(o / 7) % 2) === 1 && trouveBotImpaire === -1 && Modele.isGameFinish(o)) {
            IA.winningRedOdds[o % 7] = o;
          }
          Modele.grille[o] = 0;
        }
      }
      return null;
    },
    playAllPos: function(u) {
      var i, _results;
      IA.pos = -1;
      i = u - 7;
      _results = [];
      while (i < u && IA.pos < 0) {
        IA.ifPlayHereGiveMeExactPos(i);
        _results.push(i++);
      }
      return _results;
    },
    playWithoutModel: function() {
      var firstTurn, stopLoop1, _results;
      firstTurn = true;
      alert;
      _results = [];
      while (true) {
        IA.playAllPos(IA.posJoueur);
        if (~IA.pos && firstTurn) {
          while (true) {
            if (!IA.wontBecomeLikeThisModel(TabWontBecomeLikeThisModelPlayerTurn, 1, IA.pos)) {
              if (stopLoop1 = true) {
                break;
              }
            }
            IA.playAllPos(IA.posJoueur);
            if (!~IA.pos) {
              break;
            }
          }
          if (stopLoop1) {
            break;
          }
          firstTurn = false;
        }
        if (!(((IA.inadvisables.pop() != null) || (IA.forbids.pop() != null)) && IA.pos < 0)) {
          break;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    boolSmart: [],
    isModelfound: function() {
      return false;
    },
    winInTwoTurn: function(playerTurn) {
      var WinnerPos, cptGagnerDirect, i, o, otherPlayerWinOnMe, position2, _i;
      for (i = _i = 0; _i <= 6; i = ++_i) {
        Modele.setPlayer(playerTurn);
        IA.pos = Modele.play(i, true);
        if ((playerTurn === 1 ? IA.forbids.indexOf(IA.pos) < 0 : !IA.comparerLigne("g", IA.pos - 7))) {
          position2 = IA.pos;
          Modele.grille[IA.pos] = playerTurn;
          cptGagnerDirect = 0;
          o = 0;
          while (o < 7) {
            IA.pos = Modele.play(o, true);
            if (Modele.isGameFinish() && ~IA.pos) {
              cptGagnerDirect++;
              WinnerPos = (Modele.getPlayer() === 1 ? "g" : "i");
              otherPlayerWinOnMe = (Modele.getPlayer() === 1 ? false : IA.comparerLigne("g", IA.pos));
              if ((cptGagnerDirect === 1 && IA.comparerLigne(WinnerPos, IA.pos - 7)) || (cptGagnerDirect > 1 && !otherPlayerWinOnMe)) {
                Modele.grille[position2] = 0;
                IA.pos = i;
                IA.isModelfound = true;
                return i;
              }
            }
            o++;
          }
          Modele.grille[position2] = 0;
        }
      }
      return IA.pos = -1;
    },
    gagnerDirect: function() {
      var i, _i;
      for (i = _i = 0; _i <= 7; i = ++_i) {
        IA.pos = Modele.play(i, true);
        if (Modele.isGameFinish()) {
          Modele.isGameFinish(false);
          return IA.isModelfound = true;
        }
      }
      return IA.pos = -1;
    },
    playAvecModele: function() {
      var j, param, pos2, rec;
      param = {
        modelID: 0
      };
      j = 0;
      IA.pos5 = 48;
      IA.modelId = 0;
      return pos2 = (rec = function() {
        var TabOfTab, isPosBad, position3;
        TabOfTab = [attaque, defense, miniDef, mesModele];
        while (j < TabOfTab.length) {
          while (true) {
            if (!(IA.modelId < TabOfTab[j].length)) {
              break;
            }
            position3 = IA.modeledetectorAndAnswer(TabOfTab[j]);
            IA.modelId;
            if (~position3) {
              IA.ifPlayHereGiveMeExactPos(position3);
              if (~IA.pos) {
                isPosBad = IA.wontBecomeLikeThisModel(TabWontBecomeLikeThisModelPlayerTurn, 1, IA.pos);
                if (isPosBad) {
                  rec();
                }
                return IA.pos;
              }
              IA.pos5--;
            }
            IA.modelId = param.modelID = ++IA.modelId;
          }
          IA.modelId = param.modelID = 0;
          IA.pos5 = 48;
          j++;
        }
        IA.pos5 = "notFound";
        return -1;
      })();
    },
    falseOrModelIfFound: function(param) {
      if (param.isModelfound) {
        return param;
      } else {
        return false;
      }
    },
    giveMeACheckedPosition: function(functionWhoReturnFalseOrPosToCheck) {
      var i, param, _results;
      i = 0;
      param = {
        isModelfound: false
      };
      _results = [];
      while (true) {
        IA.pos = functionWhoReturnFalseOrPosToCheck();
        if (IA.pos < 0) {
          IA.isModelfound = false;
          break;
        }
        param = IA.wontBecomeLikeThisModel(TabWontBecomeLikeThisModelPlayerTurn, 1, IA.pos);
        IA.isModelfound = !param.isModelfound;
        if (!i++) {
          break;
        }
        _results.push(param.isModelfound && i < 7);
      }
      return _results;
    },
    wontBecomeLikeThisModel: function(TabWontBecomeLikeThisModel, player, posBot) {
      var i, param, pos, _i;
      if (posBot < 0) {
        return {};
      }
      param = void 0;
      posBot = Modele.play(posBot, true);
      Modele.grille[posBot] = player;
      for (i = _i = 0; _i <= 6; i = ++_i) {
        pos = Modele.play(i, true);
        Modele.grille[pos] = 2;
        if (~pos) {
          IA.isModelfound = !forOfSome(TabWontBecomeLikeThisModel, function(mod) {
            param = IA.structModelDetector(mod, 48);
            if (param.isModelfound) {
              return true;
            }
          });
          Modele.grille[pos] = 0;
          if (IA.isModelfound) {
            IA.inadvisables.push(parseInt(posBot));
            break;
          }
        }
      }
      Modele.grille[posBot] = 0;
      pos = (param.isModelfound ? -1 : pos);
      return param;
    },
    futureIWant: function(param, ModelInStruct, pos) {
      var j, pos3, _i;
      for (j = _i = 0; _i <= 6; j = ++_i) {
        if (param.isModelfound) {
          break;
        }
        pos3 = Modele.play(j, true);
        if (~pos3) {
          Modele.grille[pos3] = 1;
          param = IA.findModel(ModelInStruct, pos);
          Modele.grille[pos3] = 0;
        }
      }
      if (param.isModelfound) {
        IA.currMod = ModelInStruct.tab;
        IA.playAt = pos3;
      }
      IA.isModelfound = param.isModelfound;
      return param;
    },
    modeledetectorAndAnswer: function(modele, findAt) {
      var tab;
      if (findAt) {
        IA.modelId = 0;
      } else {
        findAt = {};
      }
      IA.modele = modele;
      IA.param = {
        isModelfound: false
      };
      tab = [];
      while (IA.modelId < modele.length && IA.param.isModelfound === false) {
        tab = IA.getListOfMatchingPos(findAt);
        findAt.modelID++;
        IA.modelId = findAt.modelID;
      }
      IA.pos = tab[0];
      findAt.modelID--;
      IA.modelId--;
      IA.isModelfound = IA.param.isModelfound;
      return IA.pos = (IA.isModelfound ? IA.pos : -1);
    },
    findModel: function(ModelInStruct, pos) {
      var i, j, length, logicalOperator, otherOption, param, stringToEVal;
      param = {};
      IA.currMod = ModelInStruct.tab;
      IA.isModelfound = false;
      if (!ModelInStruct.hasOwnProperty("logicalOperator")) {
        forOfSome(IA.currMod, function(mod) {
          param = IA.modeleDetector3(mod, pos);
          if (param.isModelfound) {
            return true;
          }
        });
      } else {
        otherOption = {};
        length = (ModelInStruct.hasOwnProperty("sym") ? 1 : 2);
        j = 0;
        while (j < length && IA.isModelfound === false) {
          if (ModelInStruct.hasOwnProperty("sameSym") && length === 2) {
            otherOption.sym = Boolean(j);
          }
          stringToEVal = "param=";
          logicalOperator = ModelInStruct.logicalOperator;
          i = 0;
          while (i < logicalOperator.length - 1) {
            stringToEVal += logicalOperator[i] + " IA.falseOrModelIfFound(IA.modeleDetector3(ModelInStruct.tab[" + i + "],pos,otherOption)) ";
            i++;
          }
          stringToEVal += logicalOperator[i];
          eval(stringToEVal);
          IA.isModelfound = param.isModelfound;
          j++;
        }
      }
      IA.currMod = ModelInStruct.tab;
      return param;
    },
    structModelDetector: function(ModelInStruct, pos) {
      var exept, param;
      param = {};
      IA.currMod = ModelInStruct.theTab;
      param = IA.findModel(ModelInStruct, pos);
      if (ModelInStruct.mode === "futur") {
        param = (param.isModelfound ? {
          isModelfound: false
        } : IA.futureIWant(param, ModelInStruct, pos));
      }
      if (param.isModelfound) {
        exept = ModelInStruct.exept;
        param.theModelISelf = ModelInStruct;
        if (exept) {
          exept.sym = param.sym;
          if (IA.structModelDetector(exept, 48).isModelfound) {
            param.isModelfound = false;
          }
        }
        if (ModelInStruct.hasOwnProperty("playAt")) {
          IA.playAt = ModelInStruct.playAt;
        }
      }
      IA.isModelfound = param.isModelfound;
      return param;
    },
    bloquerDirect: function() {
      var i;
      Modele.nextPlayer();
      i = 0;
      while (i < 7) {
        IA.pos = Modele.play(i, true);
        if (Modele.isGameFinish()) {
          Modele.nextPlayer();
          return IA.pos = Modele.play(IA.pos, true);
        }
        i++;
      }
      Modele.nextPlayer();
      return IA.pos = -1;
    },
    dontHelpJ2: function($forbids) {
      var i, position, _results;
      i = 0;
      _results = [];
      while (i < 7) {
        position = Modele.play(i, true);
        Modele.grille[position] = "1";
        Modele.nextPlayer();
        Modele.play(i, true);
        Modele.nextPlayer();
        Modele.grille[position] = "0";
        if (Modele.isGameFinish() && position !== $forbids[$forbids.length - 1] && position >= 0) {
          $forbids.push(position);
        }
        _results.push(i++);
      }
      return _results;
    },
    detectBadPositionAlgorythme: function() {
      var i, pos;
      i = 0;
      while (i < 7) {
        Modele.setPlayer(1);
        pos = Modele.play(i, true);
        Modele.grille[pos] = "1";
        if (~IA.winInTwoTurn(2)) {
          IA.inadvisables.push(pos);
        }
        IA.isModelfound = false;
        Modele.grille[pos] = 0;
        i++;
      }
      return Modele.setPlayer(1);
    },
    getListOfMatchingPos: function(findAt) {
      var model, tabPosInBigGrille, u;
      tabPosInBigGrille = [];
      model = IA.modele[findAt.modelID = IA.modelId];
      IA.param = IA.structModelDetector(model, IA.pos5);
      IA.currMod = IA.param.theTab;
      IA.pos = IA.param.pos;
      if (IA.currMod) {
        IA.currMod = (Array.isArray(IA.currMod[0]) ? IA.currMod[0] : IA.currMod);
      }
      if (IA.isModelfound === true) {
        if (Array.isArray(IA.playAt)) {
          u = 0;
          while (u < IA.playAt.length) {
            tabPosInBigGrille.push(IA.addPosOkToGroup(IA.playAt[u]));
            u++;
          }
        } else {
          tabPosInBigGrille.push(IA.addPosOkToGroup(IA.playAt));
        }
        IA.pos5 = IA.beginToEnd(IA.pos);
      } else {
        IA.pos5 = 48;
      }
      return tabPosInBigGrille;
    },
    addPosOkToGroup: function(posRelativeToModele) {
      if (IA.param.theModelISelf && IA.param.theModelISelf.mode === "futur") {
        return IA.playAt;
      } else {
        return IA.pos + IA.positionOfSym(posRelativeToModele, IA.currMod[0].length, IA.param.sym);
      }
    },
    beginToEnd: function(begin) {
      return begin + IA.currMod.length * 7 - 7;
    },
    findForbiddenAndNotRecommandedPosition: function() {
      var findAt, o, tab, tabForbids;
      IA.forbids.length = IA.inadvisables.length = 0;
      IA.dontHelpJ2(IA.forbids);
      IA.detectBadPositionAlgorythme();
      findAt = {};
      IA.pos5 = 48;
      IA.param = {
        isModelfound: false
      };
      tabForbids = [modPosDeconseille, interditUnPeu];
      o = 0;
      while (o < tabForbids.length) {
        IA.modele = tabForbids[o];
        IA.modelId = 0;
        while (IA.modelId < IA.modele.length) {
          tab = IA.getListOfMatchingPos(findAt);
          if (IA.param.isModelfound === false) {
            IA.pos5 = 48;
            IA.modelId++;
          } else {
            Array.prototype.push.apply(IA.inadvisables, tab);
            IA.pos5--;
          }
        }
        o++;
      }
      IA.notUnderMe(IA.inadvisables);
      return IA.DeleteException();
    },
    DeleteException: function() {
      var findAt, pos, position, _results;
      findAt = {};
      IA.modelId = 0;
      IA.pos5 = 48;
      _results = [];
      while (IA.modelId < mesModele.length) {
        IA.modeledetectorAndAnswer(tabException);
        if (~IA.pos) {
          position = IA.pos;
          pos = IA.inadvisables.indexOf(position);
          while (~pos) {
            IA.inadvisables.splice(pos, 1);
            pos = IA.inadvisables.indexOf(position);
          }
          _results.push(IA.pos5--);
        } else {
          break;
        }
      }
      return _results;
    },
    isModeleBottomFlat: function(oneModele) {
      return forOfSome(oneModele.at(-1), function(pos) {
        if (pos !== "a" && pos !== "9") {
          return true;
        }
      });
    },
    modeleDetector4: function(oneModeleAndTheAnswer, position) {
      var r;
      r = IA.modeleDetector3(oneModeleAndTheAnswer[0], position);
      IA.pos = r.pos;
      IA.playAt = oneModeleAndTheAnswer[1];
      IA.currMod = oneModeleAndTheAnswer[0];
      if (!r.isModelfound) {
        IA.pos = -1;
      }
      return r;
    },
    modeleDetector3: function(oneModele, position, otherOption) {
      var dontChangeSym, posOneModeleSym2, poses, stopLoopCond, sym;
      sym = true;
      dontChangeSym = false;
      otherOption = otherOption || {};
      if (otherOption.hasOwnProperty("sym")) {
        sym = otherOption.sym;
        dontChangeSym = true;
      }
      posOneModeleSym2 = {
        "true": {
          pos: position
        },
        "false": {
          pos: position
        }
      };
      stopLoopCond = function() {
        var pos, posSym;
        posSym = posOneModeleSym2[sym].pos;
        pos = posOneModeleSym2[!sym].pos;
        return posOneModeleSym2[sym].isModelfound || otherOption.hasOwnProperty("samepos") || (posSym < 0 && pos < 0) || (dontChangeSym && posSym < 0);
      };
      while (true) {
        poses = posOneModeleSym2[sym] = IA.modeleDectector1(oneModele, posOneModeleSym2[sym].pos, sym);
        if (!poses.isModelfound) {
          poses.pos = Math.min(Math.ceil(poses.pos / 7) * 7 - oneModele[0].length, poses.pos - 1);
          sym = !dontChangeSym && !sym;
        }
        if (!!stopLoopCond()) {
          break;
        }
      }
      IA.isModelfound = posOneModeleSym2[sym].isModelfound;
      return {
        pos: posOneModeleSym2[sym].pos - 7 * (oneModele.length - 1),
        sym: sym,
        isModelfound: IA.isModelfound,
        theTab: oneModele
      };
    },
    modeleDectector1: function(oneModele, posOneModele, sym) {
      var i, line;
      if (posOneModele !== false) {
        i = 0;
        while (i++ < oneModele.length) {
          line = oneModele.at(-i);
          if (sym) {
            line = line.reverse();
          }
          if (!IA.comparerLigne(line, posOneModele - 7 * (i - 1))) {
            break;
          }
        }
        if (i > oneModele.length) {
          return {
            pos: posOneModele,
            isModelfound: true
          };
        }
      }
      return {
        pos: posOneModele,
        isModelfound: false
      };
    },
    topToBottom: function(pos, length) {
      return pos + length * 7 - 7;
    },
    bottomToTop: function(pos, length) {
      return pos + ~length * 7;
    },
    p4BlockEasy: function(posJoueur, retournerPosition) {
      var botSmart, findAt;
      IA.posJoueur = posJoueur;
      findAt = void 0;
      botSmart = void 0;
      if (Modele.isGameFinish()) {
        return false;
      }
      if (parseInt(IA.dif) / 100 + Math.random() > 1) {
        IA.boolSmart.push("true");
        Modele.setPlayer(1);
        IA.fillsWinningPos();
        IA.isModelfound = false;
        IA.pos = -1;
        IA.modelId = 0;
        findAt = {
          modelID: 0
        };
        IA.pos5 = 48;
        [
          IA.gagnerDirect, IA.bloquerDirect, IA.findForbiddenAndNotRecommandedPosition, IA.winInTwoTurn.bind(IA, 1), IA.modeledetectorAndAnswer.bind(IA, perfectModele, {
            modelID: 0
          }), function() {
            IA.modelId = 0;
            IA.pos5 = 48;
            return IA.playAvecModele();
          }, IA.playWithoutModel.bind(IA, posJoueur)
        ].some(function(func, i) {
          func();
          return ~IA.pos;
        });
      } else {
        IA.boolSmart.push("false");
        IA.pos = Math.floor(Math.random() * 7);
      }
      return Modele.play(IA.pos, retournerPosition);
    },
    winningRedPairs: [],
    winningYellowOdds: [],
    winningRedOdds: [],
    winningYellowPairs: [],
    forbids: [],
    inadvisables: [],
    pos: -1,
    modelId: 0
  };

  Array.prototype.has = function(variable) {
    return ~this.indexOf(variable);
  };

  IA.comparerCaractere = function(a, car, impaire) {
    car *= 1;
    if (isNaN(a)) {
      return a === 'a' || a === 'y' && car !== 2 || a === 'z' && car !== 1;
    } else {
      a = +a;
      return car === a || a === 9 && car !== 0 || a === 6 && (car === 1 || car === 2) || a === 5 && (car === 1 || car === 2 || car === 0) || (impaire ? a === 8 && car === 2 || a === 4 && car === 1 : car === 1 && a === 3 || (a === 7 && car === 2));
    }
  };

  IA.comparerLigne = function(modligne, o) {
    var gotonextif;
    var a;
    var a, b, cont, contin, gotonextif, i, impaire;
    if (o < 0) {
      return false;
    }
    cont = true;
    i = o;
    while (i < modligne.length + o && cont) {
      a = modligne.charAt(i - o);
      a = '' + a;
      b = Modele.grille[i];
      if (o < 0) {
        return false;
      }
      impaire = Math.floor(i / 7) % 2;
      if (Modele.grille[i] === 0) {
        gotonextif = true;
        switch (a) {
          case 'q':
          case 'p':
          case 'e':
          case 'r':
          case 'w':
          case 'g':
          case 'j':
          case '.':
          case 'f':
          case 'h':
          case 'i':
          case 't':
            if (a === 'q' || a === 'p' || a === 'e' || a === 'r' || a === 'w' || a === 'g' || a === 'j' || a === '.' || a === 'f' || a === 'h' || a === 'i' || a === 't') {
              gotonextif = false;
              if (a === 'q' || a === 'p') {
                cont = IA.winningRedPairs[i % 7] < IA.winningYellowOdds[i % 7];
                if (a === 'p') {
                  cont = !cont;
                }
              } else if ('t' === a) {
                cont = IA.inadvisables.indexOf(i) + 1;
              } else if (a === 'r') {
                cont = IA.winningRedPairs[i % 7] < IA.winningYellowOdds[i % 7] || IA.winningYellowOdds[i % 7] === -1;
                cont = cont && IA.winningRedPairs[i % 7] <= i;
                Modele.grille[i] = 1;
                cont = cont && Modele.isGameFinish(i);
              } else if (a === '.' || a === 'f') {
                Modele.grille[i] = 1;
                cont = cont && Modele.isGameFinish(i);
                if (a === '.') {
                  cont = !cont;
                }
                if (cont) {
                  contin = true;
                  Modele.grille[i] = 2;
                  cont = Modele.isGameFinish(i);
                  if (a === 'f') {
                    cont = !cont;
                  }
                }
              } else {
                if (a === 'e' || a === 'r' || a === 'w') {
                  cont = IA.winningRedPairs[i % 7] < IA.winningYellowOdds[i % 7] || IA.winningYellowOdds[i % 7] === -1;
                  cont = cont && IA.winningRedPairs[i % 7] <= i;
                  if (a === 'w') {
                    cont = !cont;
                  }
                } else if (a === 'g' || a === 'j' || a === '.' || a === 'f') {
                  Modele.grille[i] = 1;
                  cont = cont && Modele.isGameFinish(i);
                  if (a === 'j') {
                    cont = !cont;
                  }
                } else if (a === 'h' || a === 'i') {
                  Modele.grille[i] = 2;
                  cont = Modele.isGameFinish(i);
                  if (a === 'h' || a === 'f') {
                    cont = !cont;
                  }
                }
              }
              contin = false;
            }
        }
        Modele.grille[i] = 0;
      }
      if (Modele.grille[i] !== 0 || gotonextif) {
        cont = IA.comparerCaractere(a, b, impaire);
      }
      if (cont && i > modligne.length - 2 + o) {
        return cont;
      }
      i++;
    }
  };

}).call(this);
