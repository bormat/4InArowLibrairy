// Generated by LiveScript 1.4.0
(function(){
  var Disc, Modele, mettrePion;
  Disc = (function(){
    Disc.displayName = 'Disc';
    var prototype = Disc.prototype, constructor = Disc;
    function Disc(pos){
      this.pos = pos;
      this.color = Modele.grille[this.pos];
    }
    prototype.goToDir = function(dir){
      var tab;
      tab = [this.pos];
      for (;;) {
        tab[tab.length] = tab[tab.length - 1] + dir;
        if (Modele.grille[tab[tab.length - 1]] != this.color) {
          break;
        }
        if (this.distance(tab[tab.length - 2], tab[tab.length - 1]) > 1) {
          break;
        }
      }
      return tab[tab.length - 2];
    };
    prototype.distance = function(d1, d2){
      return Math.abs(d1 % 7 - d2 % 7 || ~(d1 / 7) - ~(d2 / 7));
    };
    return Disc;
  }());
  window.Modele = Modele = {
    isGameFinish: function(){
      var isGameFinish;
      return this.isGameFinish = function(pos){
        var f;
        if (pos < 0) {
          return false;
        }
        if (pos != null) {
          if (typeof pos === 'boolean') {
            isGameFinish = pos;
          } else {
            Modele.grille[-1] = null;
            f = bind$(new Disc(pos), 'goToDir');
            [1, 6, 7, 8].some(function(dir){
              var res$, i$, to$, ridx$;
              res$ = [];
              for (i$ = f(-dir), to$ = f(dir); dir < 0 ? i$ >= to$ : i$ <= to$; i$ += dir) {
                ridx$ = i$;
                res$.push(ridx$);
              }
              Modele.winInfo = res$;
              return isGameFinish = Modele.winInfo.length > 2;
            });
          }
        }
        return isGameFinish;
      };
    },
    play: function(position, test){
      position %= 7;
      while (Modele.grille[position + 7] == 0 && position < 37) {
        position += 7;
      }
      if (Modele.grille[position] == 0) {
        Modele.mettrePion(position, test);
        return position;
      }
      return -1;
    },
    mettrePion: mettrePion = function(position, test){
      var ref$;
      Modele.grille[position] = Modele.getPlayer();
      if (!test) {
        Modele.nextPlayer();
        (ref$ = Modele.backup)[ref$.length] = position;
      }
      Modele.isGameFinish(position);
      if (test) {
        Modele.grille[position] = 0;
      }
      return Modele.isGameFinish();
    },
    playAgain: function(emplacement){
      Modele.isGameFinish(false);
      Modele.init();
      Modele.setPlayer(1);
      Modele.play(3);
      return Modele.backup = [38];
    },
    joueur: '1',
    grille: [],
    backup: [],
    init: function(){
      var i;
      i = 0;
      while (i < 42) {
        Modele.grille[i] = 0;
        i++;
      }
      return Modele.isGameFinish(false);
    },
    setGrille: function(tab){
      var i, results$ = [];
      i = 0;
      while (i < 42) {
        Modele.grille[i] = tab[i];
        results$.push(i++);
      }
      return results$;
    },
    setModel: function(tab){
      return Modele.setGrille(Modele.modelToArray(tab));
    },
    modelToArray: function(tab){
      var tab2, lengthLine;
      tab2 = [];
      lengthLine = tab[0].length;
      tab.forEach(function(tabI){
        var i$, to$, o, results$ = [];
        for (i$ = 0, to$ = lengthLine; i$ < to$; ++i$) {
          o = i$;
          results$.push(tab2.push(tabI[o]));
        }
        return results$;
      });
      return tab2;
    },
    loadTab: function(tab, emplacement){
      return Modele.grille = Modele.modelToArray(tab);
    },
    nextPlayer: function(){
      return Modele.joueur = Modele.joueur == 1 ? 2 : 1;
    },
    getPlayer: function(dec){
      var nb;
      nb = parseInt(Modele.joueur);
      if (dec == 1) {
        nb = nb % 2 + 1;
      }
      return nb;
    },
    setPlayer: function(number){
      return Modele.joueur = number;
    },
    isHumanTurn: function(){
      return Modele.joueur == 1;
    },
    undo: function(emplacement, Nothuman){
      var pos;
      Modele.isGameFinish(false);
      pos = Modele.backup.pop();
      if (pos == 38) {
        return Modele.backup.push(pos);
      }
      Modele.grille[pos] = 0;
      Modele.nextPlayer();
      return pos;
    },
    restore: function(backup){
      var joueur, i;
      Modele.partiFini = false;
      Modele.init();
      joueur = 1;
      Modele.backup = backup;
      i = backup.lastIndexOf(38);
      while (i < backup.length) {
        if (Modele.grille[backup[i]] == 0) {
          Modele.grille[backup[i]] = joueur;
          joueur = joueur % 2 + 1;
        }
        i++;
      }
      return Modele.setPlayer(Modele.backup % 2 + 1);
    },
    saveGame: function(){
      $.cookie('grille', JSON.stringify(Modele.backup));
      return $.cookie('boolSmart', JSON.stringify(IA.boolSmart));
    }
  };
  Modele.init();
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
