// Generated by LiveScript 1.4.0
(function(){
  window.app = angular.module('myApp', ['uiSlider']);
  window.app.controller('myCtrl', function($scope, $rootScope, $timeout, $q){
    return (function(){
      var x$, model, ia, isGameOver, DeplierClass, $, this$ = this;
      window.o = this;
      x$ = window.borto;
      model = x$.modele;
      ia = x$.ia;
      isGameOver = bind$(model, 'isGameOver');
      DeplierClass = (function(){
        DeplierClass.displayName = 'DeplierClass';
        var tab, prototype = DeplierClass.prototype, constructor = DeplierClass;
        tab = {
          'false': 'optionInvisible',
          'true': 'optionVisible'
        };
        function DeplierClass(it){
          this[0] = it;
        }
        prototype.deplier = function(it){
          it == null && (it = !this[0]);
          return this[0] = it;
        };
        prototype.getClass = function(){
          return tab[this[0]];
        };
        prototype.getClassF = function(){
          return tab[this[0]()];
        };
        prototype.isDisp = function(){
          return this[0];
        };
        return DeplierClass;
      }());
      $ = jQuery;
      this.ia = ia;
      this.model = model;
      this.threadIsntUsed = true;
      this.stackPosition = [];
      this.isBotActive = true;
      this.modeCreator = false;
      this.whyItIsFinish = false;
      this.animation2 = true;
      this.popup = new DeplierClass;
      this.fen = {
        stayOpen: true
      };
      this.mode = 'normal';
      this.message = 'ça va commencer';
      this.endGameMessage = true;
      this.minLine = 0;
      this.maxLine = 5;
      this.minCol = 0;
      this.maxCol = 6;
      this.tabColor = {
        'a': 'rgb(255,50,234)',
        'e': 'rgb(21,90,22)',
        'f': 'rgb(97,1,234)',
        'h': 'rgb(0,200,180)',
        'i': 'rgb(97,28,34)',
        'n': 'rgb(97,234,0)',
        'g': 'rgb(200,200,234)',
        'j': 'rgb(12,20,234)',
        0: 'white',
        1: 'rgb(255,251,0)',
        2: 'rgb(255,0,0)',
        3: 'rgb(205,209,77)',
        4: 'rgb(160,166,0)',
        5: 'rgb(255,162,0)',
        6: 'rgb(99,99,99)',
        7: 'rgb(255,128,128)',
        8: 'rgb(140,0,0)',
        9: 'rgb(0,255,221)'
      };
      this.preview = {
        pos: 0,
        add: function(it){
          var i$, i, ref$;
          for (i$ = 0; i$ <= 6; ++i$) {
            i = i$;
            if (!model.grille[(((this.pos += it) % (ref$ = 7) + ref$) % ref$)]) {
              return this.on();
            }
          }
        },
        off: function(){
          var i$, i, results$ = [];
          for (i$ = 0; i$ <= 6; ++i$) {
            i = i$;
            results$.push(o.grille[i] = model.grille[i]);
          }
          return results$;
        },
        set: function(it){
          this.off();
          this.pos = it;
          if (model.grille[it % 7] == 0) {
            this.on();
          }
          return it;
        },
        on: function(){
          var ref$;
          if (o.animRun) {
            return false;
          }
          this.off();
          return o.grille[(((this.pos) % (ref$ = 7) + ref$) % ref$)] = model.getPlayer();
        }
      };
      this.replayIcon = function(){
        return isGameOver() && !this.whyItIsFinish || this.fen.disp === 'message';
      };
      this.darkWinningPos = function(dark){
        var f, colorNumber, this$ = this;
        f = model.winInfo;
        colorNumber = model.grille[f[0]] * (dark ? 4 : 1);
        return f.forEach(function(pos){
          return this$.grille[pos] = colorNumber;
        });
      };
      this.fullscreen = function(){
        this.fen.disp = 'play';
        this.popup.deplier(true);
        return this.whyItIsFinish = false;
      };
      this.messageIfEndGame = function(){
        if (model.weHaveAWinner()) {
          this.darkWinningPos(true);
          this.message = model.isHumanTurn() ? 'bravo vous avez gagné' + (2 * IA.boolSmart === model.backup.length ? ($(document).trigger('historiqueJeu', [model.backup]), 'envoyer votre historique par commentaire pour améliorer le jeu') : 'augmentez un peu le niveau') : 'Le robot gagne cette fois vous pouvez baisser le niveau de difficulté de quelques pourcents';
        } else if (model.isGameFull()) {
          this.message = 'ceci est une égalité mais pas une victoire';
        } else {
          return false;
        }
        this.fen.disp = 'message';
        this.whyItIsFinish = false;
        this.popup.deplier(true);
        return true;
      };
      this.anim = function(To, player){
        return $q(function(resolve){
          var i, asyncronousFor;
          this$.animRun = true;
          i = To % 7;
          return (asyncronousFor = function(){
            return $timeout(i <= To ? function(){
              if (i > 6) {
                this$.grille[i - 7] = 0;
              }
              this$.grille[i] = player;
              i += 7;
              return asyncronousFor();
            } : resolve, this$.time);
          })();
        });
      };
      this.fallenPion = function(pos){
        var n, ref$;
        if (this$.modeCreator) {
          n = this$.keyCode % 48;
          return this$.grilleCreator[pos] = (function(){
            switch (false) {
            case !(-1 < n && n < 10):
              return n;
            default:
              return String.fromCharCode(this.keyCode).toLowerCase();
            }
          }.call(this$));
        } else if (isGameOver()) {
          this$.whyItIsFinish = false;
          this$.popup.deplier(true);
          this$.fen.disp = "";
          return this$.stackPosition.length = 0;
        } else {
          (ref$ = this$.stackPosition)[ref$.length] = pos;
          return this$.loopThreatAnimation();
        }
      };
      this.loopThreatAnimation = function(){
        var pos, this$ = this;
        if (!(this.stackPosition.length && this.threadIsntUsed)) {
          return;
        }
        if (isGameOver()) {
          this.stackPosition.length = 0;
          this.threadIsntUsed = true;
          return;
        }
        this.threadIsntUsed = false;
        this.time = this.animation2 ? 50 : 0;
        pos = model.play(this.stackPosition.shift());
        if (pos < 0) {
          return this.threadIsntUsed = true;
        }
        return this.anim(pos, model.getPlayer(1)).then(function(){
          var posBot;
          this$.animRun = false;
          if (this$.messageIfEndGame()) {
            return;
          }
          if (this$.isBotActive && model.backup.length % 2 === 0) {
            posBot = IA.p4BlockEasy(pos, false);
            return this$.anim(posBot, 1);
          }
        }).then(function(){
          var ref$;
          this$.grille = [(ref$ = model.grille)[0], ref$[1], ref$[2], ref$[3], ref$[4], ref$[5], ref$[6], ref$[7], ref$[8], ref$[9], ref$[10], ref$[11], ref$[12], ref$[13], ref$[14], ref$[15], ref$[16], ref$[17], ref$[18], ref$[19], ref$[20], ref$[21], ref$[22], ref$[23], ref$[24], ref$[25], ref$[26], ref$[27], ref$[28], ref$[29], ref$[30], ref$[31], ref$[32], ref$[33], ref$[34], ref$[35], ref$[36], ref$[37], ref$[38], ref$[39], ref$[40], ref$[41]];
          this$.threadIsntUsed = true;
          if (this$.isBotActive) {
            this$.messageIfEndGame();
          }
          this$.animRun = false;
          return this$.loopThreatAnimation();
        });
      };
      this.clickOnBlack = function(){
        this.fen.disp = 'play';
        return this.popup.deplier(false);
      };
      this.reverse = function(aString){
        return o[aString] = !o[aString];
      };
      this.alert = function(text){
        return alert(text);
      };
      this.optionDisp = function(){
        if (this.optionsWidth === optionsWidthInit) {
          return 'block';
        } else {
          return 'none';
        }
      };
      this.loadStory = function(grille2){
        if (!grille2) {
          return false;
        }
        model.restore(grille2);
        if (!(model.backup.length % 2)) {
          this.undo();
        }
        this.grille.safeClone(model.grille);
        return model.setPlayer(2);
      };
      this.load = function(grille2){
        model.setModel(grille2);
        return this.grille.safeClone(model.grille);
      };
      this.modeleCreator = function(){
        var ref$;
        if (!this.modeCreator) {
          this.keyCode = 5 + 96;
          this.grilleCreator = this.grille.slice();
          this.grilleCreator[(ref$ = model.backup)[ref$.length - 1]] = 0;
        }
        return this.reverse('modeCreator');
      };
      this.goodGrille = function(){
        if (this.modeCreator) {
          return this.grilleCreator;
        } else {
          return this.grille;
        }
      };
      this.displayOption = function(){
        if (!(this.endGameMessage && this.popup.isDisp() || this.replayIcon())) {
          this.popup.deplier();
        }
        this.whyItIsFinish = true;
        this.endGameMessage = false;
        return this.fen.disp = 'option';
      };
      this.init = function(){
        var this$ = this;
        this.popup.deplier(false);
        this.threadIsntUsed = true;
        model.playAgain();
        IA.boolSmart = 1;
        this.endGameMessage = false;
        this.fen.disp = 'option';
        this.grille = model.grille.slice();
        return this.replayIconPop = new DeplierClass(function(){
          return this$.replayIcon();
        });
      };
      this.restore = function(){
        this.loadStory(borto.cookies.getTab('backup'));
        return IA.boolSmart = borto.cookies.getTab('boolSmart');
      };
      this.save = function(){
        borto.cookies.set('backup', model.backup);
        return borto.cookies.set('boolSmart', IA.boolSmart);
      };
      this.graphique = function(colorNumber){
        return this.tabColor[colorNumber];
      };
      this.undo = function(){
        var pos;
        if (isGameOver()) {
          this.fen.disp = '';
          this.popup.deplier(false);
          this.darkWinningPos(false);
          if (this.whyItIsFinish) {
            this.whyItIsFinish = false;
          } else {
            model.weHaveAWinner(false);
          }
        }
        this.threadIsntUsed = true;
        pos = model.undo();
        this.grille[pos] = 0;
        if (this.isBotActive && model.getPlayer() === 1) {
          if (model.backup.length % 2 === 0) {
            this.undo();
          } else {
            model.setPlayer(2);
          }
          if (IA.boolSmart > 1) {
            IA.boolSmart--;
          }
        }
        return this.popup.deplier(false);
      };
      this.keydown = function(e){
        var that, ref$, n;
        e.preventDefault();
        this.keyCode = e.which;
        if (!this.modeCreator) {
          switch (that = e.which) {
          case 37:
          case 39:
            return this.preview.add(that - 38);
          case 38:
          case 90:
            return this.undo();
          case 40:
            return this.fallenPion(this.preview.pos);
          default:
            if (0 <= (ref$ = n = that % 48) && ref$ < 10) {
              return this.fallenPion(n);
            }
          }
        }
      };
      this.reverseIsBotActive = function(){
        this.reverse('isBotActive');
        if (model.backup.length % 2 === 0) {
          return this.undo();
        }
      };
      this.touchStart = function(){
        this.displayScroll = 'block';
        this.lastY = event.touches[0].clientY;
        return this.touchMove();
      };
      this.touchMove = function(){
        var pos;
        if (this.popup.isDisp()) {
          return false;
        }
        pos = event.touches.length >= 1
          ? event.touches[0].pageX
          : -1;
        if (pos < 0) {
          return false;
        }
        this.preview.set(~~((pos - $('#p4').offset().left) * 7 / $('#p4').width()));
        return event.preventDefault();
      };
      this.touchEnd = function(){
        if (this.popup.isDisp()) {
          return true;
        }
        event.preventDefault();
        return this.fallenPion(this.preview.pos);
      };
      this.init();
      this.popup.deplier(true);
      return this.fen.disp = 'message';
    }.call($scope));
  });
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
